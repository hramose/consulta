{"version":3,"sources":["schedule.js"],"names":[],"mappingsfile":"schedule.min.js","sourcesContent":["$(function () {\r\n\r\n    var isMobile = {\r\n      Android: function() {\r\n          return navigator.userAgent.match(/Android/i);\r\n      },\r\n      BlackBerry: function() {\r\n          return navigator.userAgent.match(/BlackBerry/i);\r\n      },\r\n      iOS: function() {\r\n          return navigator.userAgent.match(/iPhone|iPad|iPod/i);\r\n      },\r\n      Opera: function() {\r\n          return navigator.userAgent.match(/Opera Mini/i);\r\n      },\r\n      Windows: function() {\r\n          return navigator.userAgent.match(/IEMobile/i);\r\n      },\r\n      any: function() {\r\n          return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\r\n      }\r\n  };\r\n\r\n  if( isMobile.any() ) {\r\n      $('.box-create-appointment').hide();\r\n    }else{\r\n      //$('.box-create-appointment').show();\r\n    }\r\n\r\n    $(\".dropdown-toggle\").dropdown();\r\n    \r\n\r\n    /* initialize the external events\r\n     -----------------------------------------------------------------*/\r\n    function ini_events(ele) {\r\n     \r\n      ele.each(function () {\r\n\r\n        var eventObject = {\r\n          title: $.trim($(this).text()), // use the element's text as the event title\r\n          user_id: $(this).data('doctor'),\r\n          patient_id: $(this).data('patient'),\r\n          office_id: $(this).data('office'),\r\n          start: moment(),\r\n          end: moment()\r\n         \r\n          \r\n        };\r\n\r\n        // store the Event Object in the DOM element so we can get to it later\r\n        $(this).data('event', eventObject);\r\n      \r\n        // make the event draggable using jQuery UI\r\n        $(this).draggable({\r\n          zIndex: 1070,\r\n          revert: true, // will cause the event to go back to its\r\n          revertDuration: 0  //  original position after the drag\r\n        });\r\n       \r\n      });\r\n    }\r\n\r\n    ini_events($('#external-events div.external-event'));\r\n\r\n    /** load events from db **/\r\n\r\n    function fetch_schedules_and_appointments() {\r\n        var schedules = [];\r\n\r\n        $.ajax({\r\n            type: 'GET',\r\n            url: '/medics/'+ $('.external-event').data('doctor') +'/schedules/list?office='+ $('.external-event').data('office'),//'/medic/schedules/list?office='+ $('.external-event').data('office') ,\r\n            data: {},\r\n            success: function (resp) {\r\n              \r\n\r\n                $.each(resp, function( index, item ) {\r\n                   \r\n                    item.allDay = parseInt(item.allDay); // = false;\r\n                    //item.rendering = 'background';\r\n                     \r\n                     var working_hours = {\r\n                      // days of week. an array of zero-based day of week integers (0=Sunday)\r\n                      dow: [dayNumber(item.date)], // Monday - Thursday\r\n\r\n                      start: item.start,//.split('T')[1], // a start time (10am in this example)\r\n                      end: item.end//.split('T')[1], // an end time (6pm in this example)\r\n                     }\r\n\r\n                    schedules.push(working_hours);\r\n\r\n                });\r\n                \r\n                //initCalendar(schedules,schedules);\r\n\r\n                $.ajax({\r\n                  type: 'GET',\r\n                  url: '/medics/'+ $('.external-event').data('doctor') +'/appointments/list?office='+ $('.external-event').data('office'),\r\n                  data: {},\r\n                  success: function (resp) {\r\n                     \r\n\r\n                      var appointments = [];\r\n\r\n                      $.each(resp, function( index, item ) {\r\n                         \r\n                          item.allDay = parseInt(item.allDay); // = false;\r\n                          \r\n                          if((item.patient_id != 0 && item.created_by != $('.external-event').data('createdby')) || item.patient_id == 0){\r\n                             item.rendering = 'background';\r\n                          }\r\n                          \r\n\r\n                          appointments.push(item);\r\n                      });\r\n                     \r\n                      initCalendar(appointments,schedules);\r\n                      \r\n                  },\r\n                  error: function (resp) {\r\n                      console.log('Error - '+ resp);\r\n\r\n                  }\r\n              });\r\n               \r\n                //initCalendar(schedules);\r\n                \r\n            },\r\n            error: function (resp) {\r\n                console.log('Error - '+ resp);\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n    }\r\n  \r\n\r\n    function dayNumber(date){\r\n        //\r\n        return $.fullCalendar.moment(date).day();\r\n    }\r\n    \r\n    //fetch_schedules();\r\n    //fetch_appointments();\r\n    fetch_schedules_and_appointments();\r\n\r\n    //fetch_events_from_medic();\r\n\r\n    /* initialize the calendar\r\n     -----------------------------------------------------------------*/\r\n    //Date for the calendar events (dummy data)\r\n    /*var date = new Date();\r\n    var d = date.getDate(),\r\n        m = date.getMonth(),\r\n        y = date.getFullYear();*/\r\n\r\n    var $calendar = $('#calendar');\r\n     var slotDuration = $calendar.attr('data-slotDuration') ? $calendar.attr('data-slotDuration') : '00:30:00';\r\n     var minTime = $calendar.attr('data-minTime') ? $calendar.attr('data-minTime') : '06:00:00';\r\n     var maxTime = $calendar.attr('data-maxTime') ? $calendar.attr('data-maxTime') : '18:00:00';\r\n     var eventDurationNumber = (slotDuration.split(':')[1] == \"00\" ? slotDuration.split(':')[0] : slotDuration.split(':')[1]);\r\n     var eventDurationMinHours = (slotDuration.split(':')[1] == \"00\" ? 'hours' : 'minutes');\r\n    var freeDays = $calendar.attr('data-freeDays') ? JSON.parse($calendar.attr('data-freeDays')) : [0];\r\n    var businessHours = [ 1, 2, 3, 4, 5, 6, 0];\r\n    \r\n      for(d in businessHours){\r\n         for(f in freeDays){\r\n                if(freeDays[f] == businessHours[d])\r\n                {\r\n                  var index = businessHours.indexOf(businessHours[d]);\r\n                   if (index > -1) {\r\n                      businessHours.splice(index, 1);\r\n                   }\r\n                 \r\n                }\r\n            }\r\n      }\r\n\r\n\r\n\r\n    function initCalendar(appointments,schedules)\r\n    {\r\n\r\n      $calendar.fullCalendar({\r\n          locale: 'es',\r\n          defaultView: 'agendaWeek',\r\n          timeFormat: 'h(:mm)a',\r\n          header: {\r\n            left: 'prev,next today',\r\n            center: 'title',\r\n            right: 'agendaWeek,agendaDay'\r\n          },\r\n          //Random default events\r\n          events: appointments,\r\n          forceEventDuration: true,\r\n          slotDuration: slotDuration,\r\n          defaultTimedEventDuration: slotDuration,\r\n          editable: false,\r\n          droppable: true, // this allows things to be dropped onto the calendar !!!\r\n          eventOverlap: false,\r\n          businessHours: schedules/*{ \r\n              // days of week. an array of zero-based day of week integers (0=Sunday)\r\n              dow: businessHours, // Monday - Thursday\r\n\r\n              start: minTime, // a start time (10am in this example)\r\n              end: maxTime, // an end time (6pm in this example)\r\n          }*/,\r\n          eventConstraint:\"businessHours\",\r\n          minTime: minTime,\r\n          maxTime: maxTime,\r\n          scrollTime: minTime,\r\n          nowIndicator: true,\r\n          timezone: 'local',\r\n          allDaySlot: false,\r\n          drop: function (date, jsEvent, ui,resourceId) { // this function is called when something is dropped\r\n           \r\n            var currentDate = new Date();\r\n            \r\n            if(date < currentDate) {\r\n\r\n                  $('#infoBox').addClass('alert-danger').html('Hora no permitida!. No puedes selecionar horas pasadas o fuera del horario de atención').show();\r\n                      setTimeout(function()\r\n                        { \r\n                          $('#infoBox').removeClass('alert-danger').html('').hide();\r\n                        },3000);\r\n\r\n                   return false;\r\n              }\r\n            // retrieve the dropped element's stored Event Object\r\n            var originalEventObject = $(this).data('event');\r\n          \r\n            // we need to copy it, so that multiple events don't have a reference to the same object\r\n            var copiedEventObject = $.extend({}, originalEventObject);\r\n            \r\n            // assign it the date that was reported\r\n            copiedEventObject.start = date;\r\n           \r\n           \r\n            copiedEventObject.allDay = false;//allDay;\r\n            copiedEventObject.backgroundColor = $(this).css(\"background-color\");\r\n            copiedEventObject.borderColor = $(this).css(\"border-color\");\r\n            copiedEventObject.overlap = false;\r\n            \r\n            // render the event on the calendar\r\n            // the last `true` argument determines if the event \"sticks\" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)\r\n\r\n           // var _id = $('#calendar').fullCalendar('renderEvent', copiedEventObject, true)[0]._id; // get _id from event in the calendar (this is for if user will remove the event)\r\n            \r\n           //var _id = resourceId;\r\n           // saveAppointment(copiedEventObject, _id);\r\n\r\n           \r\n            /*if($(this).data('patient'))\r\n              $(this).remove(); // remover de citas sin agendar\r\n         */\r\n           \r\n          },\r\n          eventReceive: function(event) {\r\n            \r\n             var currentDate = new Date();\r\n             if(event.start < currentDate) {\r\n                   \r\n                   $('#calendar').fullCalendar( 'removeEvents', event._id)\r\n                   \r\n                   return false;\r\n              }\r\n\r\n            saveAppointment(event, event._id);\r\n          },\r\n          eventResize: function(event, delta, revertFunc) {\r\n\r\n\r\n              updateAppointment(event, revertFunc);\r\n          \r\n           \r\n          },\r\n          eventDrop: function(event, delta, revertFunc) {\r\n            \r\n              updateAppointment(event, revertFunc);\r\n              \r\n\r\n          },\r\n          eventRender: function(event, element) {\r\n           \r\n            element.append( \"<span class='appointment-details' ></span>\" );\r\n\r\n            if (event.rendering == 'background') {\r\n                element.append('<span class=\"title-bg-event\">'+ event.title + '</span>');\r\n                \r\n            }\r\n            element.append('<div data-createdby=\"'+ event.created_by +'\"></div>');\r\n            element.append('<div data-id=\"' + event.id +'\"></span>' );\r\n           \r\n            if(event.patient_id && event.patient)\r\n            {\r\n              var officeInfoDisplay = '';\r\n               if(event.office)\r\n                {\r\n                     var officeInfo = event.office;//JSON.parse(event.office_info);\r\n\r\n                      officeInfoDisplay = 'en la '+ officeInfo.type +' '+ officeInfo.name + ' <br>Dirección: ' + officeInfo.address + ', ' + officeInfo.province +', Tel: <a href=\"tel:'+ officeInfo.phone +'\">'+ officeInfo.phone +'</a><br>'\r\n                      \r\n                   \r\n                }\r\n              if(event.created_by == $('.external-event').data('createdby'))\r\n              {\r\n                element.find(\".appointment-details\").click(function() {\r\n                    \r\n                     swal({\r\n                      title: 'Cita con el Paciente '+ event.patient.first_name + ' '+ event.patient.last_name,\r\n                      html: 'Fecha: '+ event.start.format(\"YYYY-MM-DD\") +' De: ' + event.start.format(\"HH:mm\") + ' a: ' + event.end.format(\"HH:mm\") +' <br>'+ officeInfoDisplay,\r\n                      showCancelButton: true,\r\n                      confirmButtonColor: '#d33',\r\n                      cancelButtonColor: '#3085d6',\r\n                      cancelButtonText: 'Ok',\r\n                      confirmButtonText: 'Eliminar cita'\r\n                    }).then(function () {\r\n                      \r\n                      deleteAppointment(event._id, event);\r\n\r\n                      swal(\r\n                        'Cita cancelada!',\r\n                        'Tu cita ha sido eliminada del calendario.',\r\n                        'success'\r\n                      )\r\n\r\n                    },function (dismiss) {});\r\n\r\n                   \r\n                     \r\n                  });\r\n              }\r\n              \r\n\r\n            }else{\r\n\r\n                var officeInfoDisplay = '';\r\n                var titleAlert = event.title;\r\n                var textAlert = 'Fecha: '+ event.start.format(\"YYYY-MM-DD\") +' De: ' + event.start.format(\"HH:mm\") + ' a: ' + event.end.format(\"HH:mm\") + officeInfoDisplay;\r\n\r\n\r\n                if(event.office)\r\n                {\r\n                     var officeInfo = event.office;//JSON.parse(event.office);\r\n\r\n                      officeInfoDisplay = '<br>Dirección: ' + officeInfo.address + ', ' + officeInfo.province +' <br>';\r\n\r\n                      titleAlert = 'Este horario está reservado para atención en la '+ officeInfo.type +' '+ officeInfo.name\r\n                      \r\n                      textAlert = 'Favor llamar a este número: <a href=\"tel:'+ officeInfo.phone +'\">'+ officeInfo.phone +'</a> <br>Fecha: '+ event.start.format(\"YYYY-MM-DD\") +' De: ' + event.start.format(\"HH:mm\") + ' a: ' + event.end.format(\"HH:mm\") + officeInfoDisplay\r\n                }\r\n                element.find(\".appointment-details\").click(function() {\r\n                   \r\n                    swal({\r\n                        title: titleAlert,\r\n                        html: textAlert\r\n                        \r\n                      });\r\n                  \r\n                  \r\n                   \r\n                });\r\n                \r\n              \r\n            }\r\n\r\n        },\r\n        dayClick: function(date, jsEvent, view) {\r\n              var currentDate = new Date();\r\n              \r\n              if(date < currentDate || $(jsEvent.target).hasClass(\"fc-nonbusiness\")) {\r\n\r\n                   $('#infoBox').addClass('alert-danger').html('Hora no permitida!. No puedes selecionar horas pasadas o fuera del horario de atención').show();\r\n                      setTimeout(function()\r\n                        { \r\n                          $('#infoBox').removeClass('alert-danger').html('').hide();\r\n                        },3000);\r\n\r\n                   return false;\r\n              }\r\n\r\n               if($(jsEvent.target).parent('div').hasClass(\"fc-bgevent\")) { //para prevenir que en eventos de fondo se agregue citas\r\n                  \r\n\r\n                  return false;\r\n              }\r\n\r\n              if($calendar.attr('data-appointmentsday') >= 2)\r\n                 {\r\n                  $('#infoBox').addClass('alert-danger').html('No se puede crear más de dos citas al dia!!').show();\r\n                        setTimeout(function()\r\n                        { \r\n                          $('#infoBox').removeClass('alert-danger').hide();\r\n                        },3000);\r\n\r\n                   return false;\r\n                  }\r\n          \r\n\r\n              $('#myModal').modal({backdrop:'static', show:true });\r\n              $('#myModal').find('.modal-body').attr('data-modaldate', date.format());\r\n              $('#myModal').find('.modal-body').attr('data-date', date.format(\"dddd, MMMM Do YYYY\")).attr('data-hour', date.format(\"hh:mm a\" ));\r\n                    \r\n           \r\n          },\r\n          viewRender: function(view){\r\n            \r\n            $.ajax({\r\n              type: 'GET',\r\n              url: '/medics/'+ $('.external-event').data('doctor') +'/schedules/list?office='+ $('.external-event').data('office'),//'/medic/schedules/list?office='+ $('.external-event').data('office') ,\r\n              data: {},\r\n              success: function (resp) {\r\n                \r\n                  var schedules = [];\r\n                  $.each(resp, function( index, item ) {\r\n                     \r\n                      item.allDay = parseInt(item.allDay); // = false;\r\n                     \r\n                       \r\n                       var working_hours = {\r\n                        // days of week. an array of zero-based day of week integers (0=Sunday)\r\n                        dow: [dayNumber(item.date)], // Monday - Thursday\r\n\r\n                        start: item.start,//.split('T')[1], // a start time (10am in this example)\r\n                        end: item.end//.split('T')[1], // an end time (6pm in this example)\r\n                       }\r\n\r\n                      schedules.push(working_hours);\r\n\r\n                  });\r\n\r\n                  var bh = schedules;//$('#calendar').fullCalendar('option', 'businessHours');\r\n\r\n                 \r\n                    for (var i = bh.length - 1; i >= 0; i--) {\r\n\r\n                      if(moment(bh[i].start).isBetween(view.start, view.end))\r\n                      {\r\n                        bh[i].start = bh[i].start.split('T')[1];\r\n                        bh[i].end = bh[i].end.split('T')[1];\r\n                      }\r\n\r\n                    }\r\n                   \r\n                   \r\n                    $('#calendar').fullCalendar('option', 'businessHours', bh);\r\n\r\n\r\n              },\r\n            error: function (resp) {\r\n                console.log('Error - '+ resp);\r\n\r\n            }\r\n\r\n          });\r\n\r\n           \r\n            \r\n          }\r\n        \r\n        \r\n      });\r\n\r\n      $('#calendar').fullCalendar('today');\r\n      \r\n    }\r\n\r\n    function isOverlapping(event) {\r\n     \r\n        var array = $('#calendar').fullCalendar('clientEvents');\r\n         \r\n          for(i in array){\r\n            if(event.idRemove != array[i]._id)\r\n              {\r\n                 if (event.end > array[i].start._i && event.start < array[i].end._i){\r\n                   return true;\r\n                }\r\n              }\r\n          }\r\n          return false;\r\n    }\r\n    \r\n    /* SAVE UPDATE DELETE EVENTS */\r\n    function crud(method, url, data, revertFunc) {\r\n      $('body').addClass('loading');\r\n     \r\n      $.ajax({\r\n            type: method || 'POST',\r\n            url: url,\r\n            data: data,\r\n            success: function (resp) {\r\n              $('body').removeClass('loading');\r\n              \r\n              if(method == \"POST\")\r\n              {\r\n                $('#calendar').fullCalendar( 'removeEvents', data.idRemove)\r\n                \r\n                if(resp == 'max-per-day')\r\n                 {\r\n                  $('#infoBox').addClass('alert-danger').html('No se puede crear más de dos citas al dia!!').show();\r\n                        setTimeout(function()\r\n                        { \r\n                          $('#infoBox').removeClass('alert-danger').hide();\r\n                        },3000);\r\n\r\n                   return\r\n                  }\r\n                  /*if(isOverlapping(resp))\r\n                    resp.allDay = 1; // si se montan poner el evento en todo el dia*/\r\n                \r\n                resp.appointment.allDay = parseInt(resp.appointment.allDay);\r\n\r\n                if(resp.appointment.allDay)\r\n                {\r\n                  \r\n                  deleteAppointment(resp.appointment.id);\r\n                \r\n                }else{\r\n                    \r\n                    $('#calendar').fullCalendar('renderEvent', resp.appointment, true);\r\n                    $('#calendar').attr('data-appointmentsday', resp.appointmentsToday);\r\n                    \r\n                    $('#modalReminder').modal({backdrop:'static', show:true });\r\n                    $('#modalReminder').find('.modal-body').attr('data-appointment', resp.appointment.id).show();\r\n                    \r\n         \r\n                   \r\n                   \r\n                  }\r\n              }\r\n               if(method == \"DELETE\")\r\n               {\r\n                \r\n                 if(resp.resp == 'error')\r\n                 {\r\n                  $('#infoBox').addClass('alert-danger').html('No se puede eliminar consulta ya que se encuentra iniciada!!').show();\r\n                        setTimeout(function()\r\n                        { \r\n                          $('#infoBox').removeClass('alert-danger').hide();\r\n                        },3000);\r\n\r\n                   return\r\n                  }\r\n\r\n                  $('#calendar').fullCalendar('removeEvents',data.idRemove);\r\n                  $('#calendar').attr('data-appointmentsday', resp.appointmentsToday);\r\n                  $('#myModal').find('.btn-finalizar-cita').attr('data-appointment', '');\r\n                  $('#myModal').find('.btn-cancelar-cita').attr('data-appointment', '');\r\n               }\r\n               \r\n               if(method == \"PUT\")\r\n               {\r\n                 if(resp == '')\r\n                 {\r\n                  $('#infoBox').addClass('alert-danger').html('No se puede cambiar de dia la consulta ya que se encuentra iniciada!!').show();\r\n                        setTimeout(function()\r\n                        { \r\n                          $('#infoBox').removeClass('alert-danger').hide();\r\n                        },3000);\r\n\r\n\r\n                    revertFunc();\r\n                    \r\n                   return\r\n                  }\r\n                   \r\n                   $('#calendar').fullCalendar( 'removeEvents', data.id)\r\n                   \r\n                    resp.allDay = parseInt(resp.allDay);\r\n                   \r\n\r\n                    $('#calendar').fullCalendar('renderEvent', resp, true);\r\n                  \r\n                  \r\n               }\r\n                \r\n            },\r\n            error: function () {\r\n               $('body').removeClass('loading');\r\n              console.log('error saving appointment');\r\n\r\n            }\r\n        });\r\n    }\r\n    \r\n    function saveAppointment(event, idRemove)\r\n    {\r\n      \r\n      var appointment = {\r\n        title : event.title,\r\n        date : event.start.format(\"YYYY-MM-DD\"),\r\n        start : event.start.stripZone().format(),\r\n        end : (event.end) ? event.end.stripZone().format() : event.start.add(eventDurationNumber, eventDurationMinHours).stripZone().format(),\r\n        backgroundColor: event.backgroundColor, //Success (green)\r\n        borderColor: event.borderColor,\r\n        user_id: event.user_id,\r\n        patient_id: (event.patient_id) ? event.patient_id : 0,\r\n        office_id: (event.office_id) ? event.office_id : 0,\r\n        idRemove: idRemove,\r\n        office_info: (event.office_info) ? event.office_info : '',\r\n        allDay: 0\r\n        \r\n      };\r\n     \r\n      if(isOverlapping(appointment)){\r\n        appointment.allDay = 1;\r\n      }\r\n\r\n      crud('POST', '/appointments', appointment)\r\n\r\n    }\r\n\r\n     function updateAppointment(event, revertFunc)\r\n    {\r\n      \r\n      var appointment = {\r\n        title : event.title,\r\n        date : event.start.format(\"YYYY-MM-DD\"),\r\n        start : event.start.stripZone().format(),\r\n        end : (event.end) ? event.end.stripZone().format() : event.start.add(eventDurationNumber, eventDurationMinHours).stripZone().format(),\r\n        patient_id: event.patient_id,\r\n        office_id: event.office_id,\r\n        id: event.id,\r\n        office_info: event.office_info,\r\n        allDay: event.allDay\r\n      };\r\n      \r\n      crud('PUT', '/appointments/'+appointment.id, appointment, revertFunc)\r\n    \r\n\r\n    }\r\n\r\n    function deleteAppointment(id)\r\n    {\r\n\r\n      crud('DELETE', '/appointments/'+ id + '/delete', {idRemove:id})\r\n     \r\n    }\r\n\r\n   \r\n\r\n    $('#myModal').on('shown.bs.modal', function (event) {\r\n      //\r\n     // var button = $(event.relatedTarget) // Button that triggered the modal\r\n      var date = $(this).find('.modal-body').attr('data-date') // Extract info from data-* attributes\r\n      var hour = $(this).find('.modal-body').attr('data-hour')\r\n     \r\n      // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).\r\n      // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.\r\n      var modal = $(this)\r\n      modal.find('.modal-title').html('Su cita se programará para el  <span class=\"label bg-yellow\">' + date + '</span> a las <span class=\"label bg-yellow\">'+ hour + '</span>' )\r\n      //modal.find('.modal-body').data('appointment','');\r\n    });\r\n\r\n\r\n     function createEventFromModal()\r\n    {\r\n              var event = $('div.external-event');\r\n              var date = $.fullCalendar.moment($('.modal-body').attr('data-modaldate'));\r\n              var patient_id = $('#myModal').find('.widget-user-2').attr('data-patient');\r\n              var eventObject = {\r\n                title: $.trim(event.text()), // use the element's text as the event title\r\n                user_id: event.data('doctor'),\r\n                patient_id: patient_id,\r\n                office_id: event.data('office')\r\n                \r\n              };\r\n              \r\n              var originalEventObject = eventObject;\r\n          \r\n              // we need to copy it, so that multiple events don't have a reference to the same object\r\n              var copiedEventObject = $.extend({}, originalEventObject);\r\n              \r\n              // assign it the date that was reported\r\n              copiedEventObject.start = date;\r\n\r\n               if( date.isValid())\r\n                {\r\n                 \r\n                \r\n                    copiedEventObject.allDay = false;//allDay;\r\n                    copiedEventObject.backgroundColor = event.css(\"background-color\");\r\n                    copiedEventObject.borderColor = event.css(\"border-color\");\r\n                    copiedEventObject.overlap = false;\r\n                    \r\n                    var _id = $('#calendar').fullCalendar('renderEvent', copiedEventObject, true)[0]._id; // get _id from event in the calendar (this is for if user will remove the event)\r\n                    \r\n                   \r\n                    saveAppointment(copiedEventObject, _id);\r\n              }\r\n              //Remove event from text input\r\n              \r\n              $('#myModal').find('.modal-body').attr('data-modaldate', '');\r\n              $('#myModal').modal('hide');\r\n             \r\n              \r\n              \r\n    }\r\n\r\n   \r\n     $('.btn-finalizar-cita').on('click', function (e) {\r\n       e.preventDefault();\r\n        createEventFromModal();\r\n       \r\n    });\r\n\r\n      $('.btn-finalizar-reminder').on('click', function (e) {\r\n         e.preventDefault();\r\n          \r\n          var id = $('#modalReminder').find('.modal-body').attr('data-appointment');\r\n          var reminder_time = $('#modalReminder').find('#reminder_time').val();\r\n          $('body').addClass('loading');\r\n\r\n           $.ajax({\r\n              type: 'POST',\r\n              url: '/appointments/'+ id + '/reminder',\r\n              data: { reminder_time : reminder_time },\r\n              success: function (resp) {\r\n\r\n                $('body').removeClass('loading');\r\n\r\n                $('#modalReminder').modal('hide');\r\n              },\r\n              error: function () {\r\n                \r\n                $('body').removeClass('loading');\r\n\r\n                console.log('error saving reminder');\r\n                \r\n                $('#modalReminder').modal('hide');\r\n\r\n              }\r\n          });\r\n       \r\n    });\r\n\r\n  \r\n\r\n\r\n    $('.fc-button-prev span').click(function(){\r\n         alert('prev is clicked, do something');\r\n      });\r\n\r\n      $('.fc-button-next span').click(function(){\r\n         alert('nextis clicked, do something');\r\n      });\r\n  });\r\n"]}