{"version":3,"sources":["schedule.js"],"names":[],"mappingsfile":"schedule.min.js","sourcesContent":["$(function () {\r\n\r\n    var isMobile = {\r\n      Android: function() {\r\n          return navigator.userAgent.match(/Android/i);\r\n      },\r\n      BlackBerry: function() {\r\n          return navigator.userAgent.match(/BlackBerry/i);\r\n      },\r\n      iOS: function() {\r\n          return navigator.userAgent.match(/iPhone|iPad|iPod/i);\r\n      },\r\n      Opera: function() {\r\n          return navigator.userAgent.match(/Opera Mini/i);\r\n      },\r\n      Windows: function() {\r\n          return navigator.userAgent.match(/IEMobile/i);\r\n      },\r\n      any: function() {\r\n          return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\r\n      }\r\n  };\r\n\r\n  if( isMobile.any() ) {\r\n      $('.box-create-appointment').hide();\r\n    }else{\r\n      //$('.box-create-appointment').show();\r\n    }\r\n\r\n    $(\".dropdown-toggle\").dropdown();\r\n    \r\n    //para quitar el popup tocando fuera del item\r\n    $('body').on('click', function (e) {\r\n        $('[data-toggle=\"popover\"],[data-original-title]').each(function () {\r\n            //the 'is' for buttons that trigger popups\r\n            //the 'has' for icons within a button that triggers a popup\r\n            if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {                \r\n                (($(this).popover('hide').data('bs.popover')||{}).inState||{}).click = false  // fix for BS 3.3.6\r\n            }\r\n\r\n        });\r\n    });\r\n\r\n    /* initialize the external events\r\n     -----------------------------------------------------------------*/\r\n    function ini_events(ele) {\r\n     \r\n      ele.each(function () {\r\n\r\n        var eventObject = {\r\n          title: $.trim($(this).text()), // use the element's text as the event title\r\n          user_id: $(this).data('doctor'),\r\n          patient_id: $(this).data('patient')\r\n          //created_by: $(this).data('createdby')\r\n         \r\n          \r\n        };\r\n\r\n        // store the Event Object in the DOM element so we can get to it later\r\n        $(this).data('eventObject', eventObject);\r\n      \r\n        // make the event draggable using jQuery UI\r\n        $(this).draggable({\r\n          zIndex: 1070,\r\n          revert: true, // will cause the event to go back to its\r\n          revertDuration: 0  //  original position after the drag\r\n        });\r\n       \r\n      });\r\n    }\r\n\r\n    ini_events($('#external-events div.external-event'));\r\n\r\n    /** load events from db **/\r\n    function fetch_events_from_medic() {\r\n\r\n        $.ajax({\r\n            type: 'GET',\r\n            url: '/medics/'+ $('.external-event').data('doctor') +'/appointments/list',\r\n            data: {},\r\n            success: function (resp) {\r\n                console.log(resp);\r\n\r\n                var appointments = [];\r\n\r\n                $.each(resp, function( index, item ) {\r\n                   \r\n                    item.allDay = parseInt(item.allDay); // = false;\r\n                    \r\n                    if(item.patient_id == 0 || item.created_by != $('.external-event').data('createdby')){\r\n                      item.rendering = 'background';\r\n                    }\r\n                    \r\n                    //debugger\r\n\r\n                    appointments.push(item);\r\n                });\r\n               \r\n                initCalendar(appointments);\r\n                \r\n            },\r\n            error: function () {\r\n                console.log('Error - '+ resp);\r\n\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n    \r\n\r\n    fetch_events_from_medic();\r\n   \r\n\r\n\r\n    /* initialize the calendar\r\n     -----------------------------------------------------------------*/\r\n    //Date for the calendar events (dummy data)\r\n    var date = new Date();\r\n    var d = date.getDate(),\r\n        m = date.getMonth(),\r\n        y = date.getFullYear();\r\n\r\n    function initCalendar(appointments)\r\n    {\r\n\r\n      $('#calendar').fullCalendar({\r\n          locale: 'es',\r\n          defaultView: 'agendaWeek',\r\n          timeFormat: 'h(:mm)a',\r\n          header: {\r\n            left: 'prev,next today',\r\n            center: 'title',\r\n            right: 'month,agendaWeek,agendaDay'\r\n          },\r\n          //Random default events\r\n          events: appointments,\r\n          forceEventDuration: true,\r\n          defaultTimedEventDuration: '01:00:00',\r\n          editable: false,\r\n          droppable: true, // this allows things to be dropped onto the calendar !!!\r\n          eventOverlap: false,\r\n          drop: function (date, allDay) { // this function is called when something is dropped\r\n\r\n            // retrieve the dropped element's stored Event Object\r\n            var originalEventObject = $(this).data('eventObject');\r\n          \r\n            // we need to copy it, so that multiple events don't have a reference to the same object\r\n            var copiedEventObject = $.extend({}, originalEventObject);\r\n            \r\n            // assign it the date that was reported\r\n            copiedEventObject.start = date;\r\n           \r\n           \r\n            copiedEventObject.allDay = false;//allDay;\r\n            copiedEventObject.backgroundColor = $(this).css(\"background-color\");\r\n            copiedEventObject.borderColor = $(this).css(\"border-color\");\r\n            copiedEventObject.overlap = false;\r\n            \r\n            // render the event on the calendar\r\n            // the last `true` argument determines if the event \"sticks\" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)\r\n\r\n            var _id = $('#calendar').fullCalendar('renderEvent', copiedEventObject, true)[0]._id; // get _id from event in the calendar (this is for if user will remove the event)\r\n            \r\n           \r\n            saveAppointment(copiedEventObject, _id);\r\n\r\n           \r\n            /*if($(this).data('patient'))\r\n              $(this).remove(); // remover de citas sin agendar\r\n         */\r\n           \r\n          },\r\n          eventResize: function(event, delta, revertFunc) {\r\n\r\n              updateAppointment(event, revertFunc);\r\n          \r\n           \r\n          },\r\n          eventDrop: function(event, delta, revertFunc) {\r\n            \r\n              updateAppointment(event, revertFunc);\r\n              \r\n\r\n          },\r\n          eventRender: function(event, element) {\r\n            if(event.created_by == $('.external-event').data('createdby'))\r\n            {\r\n                element.append( \"<span class='closeon fa fa-trash'></span>\" );\r\n                element.append( \"<span class='appointment-details' ></span>\" );\r\n                element.find(\".closeon\").click(function() {\r\n                   deleteAppointment(event._id, event);\r\n                });\r\n                \r\n            }\r\n            \r\n            if (event.rendering == 'background') {\r\n                element.append('<h3>'+ event.title + '</h3>');\r\n            }\r\n            element.append('<div data-createdby=\"'+ event.created_by +'\"></div>');\r\n            element.append('<div data-id=\"' + event.id +'\"></span>' );\r\n           \r\n            if(event.patient_id && event.patient)\r\n            {\r\n              element.find(\".appointment-details\").popover({\r\n                  title: 'Cita con el Dr. '+ event.user.name,\r\n                  placement: 'top',\r\n                  html:true,\r\n                  container:'#calendar',\r\n                  trigger: 'click focus', \r\n                  content: 'Fecha: '+ event.start.format(\"YYYY-MM-DD\") +' <br>De: ' + event.start.format(\"HH:mm\") + ' a: ' + event.end.format(\"HH:mm\") + '<br>Paciente: ' + event.patient.first_name + ' '+ event.patient.last_name,\r\n              });\r\n            }\r\n\r\n        },\r\n         dayClick: function(date, jsEvent, view) {\r\n\r\n              var event = $('div.external-event');\r\n              \r\n              var eventObject = {\r\n                title: $.trim(event.text()), // use the element's text as the event title\r\n                user_id: event.data('doctor'),\r\n                patient_id: event.data('patient')\r\n                //created_by: event.data('createdby')\r\n                \r\n              };\r\n              \r\n              var originalEventObject = eventObject;\r\n          \r\n              // we need to copy it, so that multiple events don't have a reference to the same object\r\n              var copiedEventObject = $.extend({}, originalEventObject);\r\n              \r\n              // assign it the date that was reported\r\n              copiedEventObject.start = date;\r\n             \r\n              copiedEventObject.allDay = false;//allDay;\r\n              copiedEventObject.backgroundColor = event.css(\"background-color\");\r\n              copiedEventObject.borderColor = event.css(\"border-color\");\r\n              copiedEventObject.overlap = false;\r\n              \r\n              // render the event on the calendar\r\n              // the last `true` argument determines if the event \"sticks\" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)\r\n\r\n              var _id = $('#calendar').fullCalendar('renderEvent', copiedEventObject, true)[0]._id; // get _id from event in the calendar (this is for if user will remove the event)\r\n              \r\n             \r\n              saveAppointment(copiedEventObject, _id);\r\n              \r\n                    \r\n           \r\n          }\r\n        \r\n      });\r\n\r\n    }\r\n\r\n    function isOverlapping(event) {\r\n     \r\n        var array = $('#calendar').fullCalendar('clientEvents');\r\n         \r\n          for(i in array){\r\n               if (event.end > array[i].start._i && event.start < array[i].end._i){\r\n                 return true;\r\n              }\r\n          }\r\n          return false;\r\n    }\r\n    \r\n    /* SAVE UPDATE DELETE EVENTS */\r\n    function crud(method, url, data, revertFunc) {\r\n      \r\n      $.ajax({\r\n            type: method || 'POST',\r\n            url: url,\r\n            data: data,\r\n            success: function (resp) {\r\n              \r\n              if(method == \"POST\")\r\n              {\r\n                $('#calendar').fullCalendar( 'removeEvents', data.idRemove)\r\n                 //debugger\r\n                  /*if(isOverlapping(resp))\r\n                    resp.allDay = 1; // si se montan poner el evento en todo el dia*/\r\n                \r\n                resp.allDay = parseInt(resp.allDay);\r\n\r\n                if(resp.allDay)\r\n                {\r\n                  \r\n                  deleteAppointment(resp.id);\r\n                \r\n                }else{\r\n                    \r\n                    $('#calendar').fullCalendar('renderEvent', resp, true);\r\n                    \r\n                    $('#myModal').modal({backdrop:'static', show:true });\r\n                    $('#myModal').find('.btn-finalizar-cita').attr('data-appointment', resp.id).attr('data-date', moment(resp.date).format(\"dddd, MMMM Do YYYY\")).attr('data-hour', moment(resp.start).locale('en').format(\"hh:mm a\" )).show();\r\n                    \r\n                    $('#myModal').find('.btn-cancelar-cita').attr('data-appointment', resp.id).show();\r\n\r\n                   /* content: 'Fecha: '+ event.start.format(\"YYYY-MM-DD\") +' <br>De: ' + event.start.format(\"HH:mm\") + ' a: ' + event.end.format(\"HH:mm\") + '<br>Paciente: ' + event.patient.first_name + ' '+ event.patient.last_name,\r\n                   */\r\n                   \r\n                  }\r\n              }\r\n               if(method == \"DELETE\")\r\n               {\r\n                \r\n                 if(resp)\r\n                 {\r\n                  $('#infoBox').addClass('alert-danger').html('No se puede eliminar consulta ya que se encuentra iniciada!!').show();\r\n                        setTimeout(function()\r\n                        { \r\n                          $('#infoBox').removeClass('alert-danger').hide();\r\n                        },3000);\r\n\r\n                   return\r\n                  }\r\n\r\n                  $('#calendar').fullCalendar('removeEvents',data.idRemove);\r\n                  $('#myModal').find('.btn-finalizar-cita').attr('data-appointment', '');\r\n                  $('#myModal').find('.btn-cancelar-cita').attr('data-appointment', '');\r\n               }\r\n               \r\n               if(method == \"PUT\")\r\n               {\r\n                 if(resp == '')\r\n                 {\r\n                  $('#infoBox').addClass('alert-danger').html('No se puede cambiar de dia la consulta ya que se encuentra iniciada!!').show();\r\n                        setTimeout(function()\r\n                        { \r\n                          $('#infoBox').removeClass('alert-danger').hide();\r\n                        },3000);\r\n\r\n\r\n                    revertFunc();\r\n                    \r\n                   return\r\n                  }\r\n                   \r\n                   $('#calendar').fullCalendar( 'removeEvents', data.id)\r\n                   \r\n                    resp.allDay = parseInt(resp.allDay);\r\n                   \r\n\r\n                    $('#calendar').fullCalendar('renderEvent', resp, true);\r\n                  \r\n                  \r\n               }\r\n                \r\n            },\r\n            error: function () {\r\n              console.log('error saving appointment');\r\n\r\n            }\r\n        });\r\n    }\r\n    \r\n    function saveAppointment(event, idRemove)\r\n    {\r\n      \r\n      var appointment = {\r\n        title : event.title,\r\n        date : event.start.format(\"YYYY-MM-DD\"),\r\n        start : event.start.stripZone().format(),\r\n        end : (event.end) ? event.end.stripZone().format() : event.start.add(1, 'hours').stripZone().format(),\r\n        backgroundColor: event.backgroundColor, //Success (green)\r\n        borderColor: event.borderColor,\r\n        user_id: event.user_id,\r\n        patient_id: (event.patient_id) ? event.patient_id : 0,\r\n        /*created_by: event.created_by,*/\r\n        idRemove: idRemove,\r\n        allDay: 0\r\n        \r\n      };\r\n     \r\n      if(isOverlapping(appointment)){\r\n        appointment.allDay = 1;\r\n      }\r\n\r\n      crud('POST', '/appointments', appointment)\r\n\r\n    }\r\n\r\n     function updateAppointment(event, revertFunc)\r\n    {\r\n      \r\n      var appointment = {\r\n        title : event.title,\r\n        date : event.start.format(\"YYYY-MM-DD\"),\r\n        start : event.start.stripZone().format(),\r\n        end : (event.end) ? event.end.stripZone().format() : event.start.add(1, 'hours').stripZone().format(),\r\n        //backgroundColor: event.backgroundColor, //Success (green)\r\n       // borderColor: event.borderColor,\r\n        //user_id: event.user_id,\r\n        patient_id: event.patient_id,\r\n        //created_by: event.created_by,\r\n        id: event.id,\r\n        allDay: event.allDay\r\n      };\r\n      \r\n      crud('PUT', '/appointments/'+appointment.id, appointment, revertFunc)\r\n    \r\n\r\n    }\r\n\r\n    function deleteAppointment(id)\r\n    {\r\n\r\n      crud('DELETE', '/appointments/'+ id + '/delete', {idRemove:id})\r\n     \r\n    }\r\n\r\n   \r\n\r\n    $('#myModal').on('shown.bs.modal', function (event) {\r\n      //debugger\r\n     // var button = $(event.relatedTarget) // Button that triggered the modal\r\n      var date = $('.btn-finalizar-cita').attr('data-date') // Extract info from data-* attributes\r\n      var hour = $('.btn-finalizar-cita').attr('data-hour')\r\n     \r\n      // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).\r\n      // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.\r\n      var modal = $(this)\r\n      modal.find('.modal-title').html('Su cita se programará para el  <span class=\"label bg-yellow\">' + date + '</span> a las <span class=\"label bg-yellow\">'+ hour + '</span>' )\r\n      //modal.find('.modal-body').data('appointment','');\r\n    });\r\n   \r\n   \r\n     $('.btn-finalizar-cita').on('click', function (e) {\r\n       \r\n       var patient_id = $('#myModal').find('.widget-user-2').attr('data-patient');\r\n       var user_id = $('.external-event').data('doctor');//$('input[name=\"medic_id\"]').val();\r\n       var appointment_id = $(this).attr('data-appointment'); //data('appointment');\r\n       var title = $('#myModal').find('.widget-user-2').attr('data-title');\r\n      \r\n         \r\n              $.ajax({\r\n                  type: 'PUT',\r\n                  url: '/appointments/'+ appointment_id,\r\n                  data: { patient_id : patient_id, title: 'Cita - '+ title, medic_id: user_id},\r\n                  success: function (resp) {\r\n                      console.log(resp);\r\n                     $('#myModal').modal('hide');\r\n                      if(resp == '')\r\n                      {\r\n                        $('#infoBox').addClass('alert-danger').html('No se puede finalizar la consulta!!').show();\r\n                            setTimeout(function()\r\n                            { \r\n                              $('#infoBox').removeClass('alert-danger').hide();\r\n                            },3000);\r\n\r\n\r\n                        \r\n                        \r\n                       return\r\n                      }\r\n\r\n                       \r\n                        \r\n                        $('#calendar').fullCalendar( 'removeEvents', resp.id)\r\n                     \r\n                        resp.allDay = parseInt(resp.allDay);\r\n                       \r\n\r\n                        $('#calendar').fullCalendar('renderEvent', resp, true);\r\n                  },\r\n                  error: function () {\r\n                    console.log('error saving appointment');\r\n\r\n                  }\r\n             \r\n             \r\n           \r\n            });\r\n    });\r\n\r\n    $('#myModal').on('click','.btn-cancelar-cita', function (e) {\r\n       \r\n       var appointment_id = $(this).attr('data-appointment');\r\n\r\n              $.ajax({\r\n                  type: 'DELETE',\r\n                  url: '/appointments/'+ appointment_id + '/delete',\r\n                  data: { id : appointment_id  },\r\n                  success: function (resp) {\r\n                      console.log(resp);\r\n                    \r\n                    if(resp){\r\n\r\n                        $('#infoBox').addClass('alert-danger').html('No se puede eliminar la consulta!!').show();\r\n                          setTimeout(function()\r\n                          { \r\n                            $('#infoBox').removeClass('alert-danger').hide();\r\n                          },3000);\r\n\r\n                         return\r\n                      }\r\n                      \r\n                    \r\n                      $('#calendar').fullCalendar('removeEvents',appointment_id);\r\n                      $('#myModal').modal('hide');\r\n                  },\r\n                  error: function () {\r\n                    console.log('error delete appointment');\r\n\r\n                  }\r\n             \r\n             \r\n           \r\n            });\r\n    });\r\n\r\n\r\n\r\n\r\n  });\r\n"]}