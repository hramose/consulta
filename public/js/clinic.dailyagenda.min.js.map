{"version":3,"sources":["clinic.dailyagenda.js"],"names":[],"mappingsfile":"clinic.dailyagenda.min.js","sourcesContent":["$(function () {\r\n\r\n     var minTime = '06:00:00';\r\n     var maxTime = '18:00:00';\r\n     var slotDuration = '00:30';\r\n     var eventDurationNumber = moment.duration(slotDuration).asMinutes(); //(slotDuration.split(':')[1] == \"00\" ? slotDuration.split(':')[0] : slotDuration.split(':')[1]);\r\n     var eventDurationMinHours = 'minutes'; //(slotDuration.split(':')[1] == \"00\" ? 'hours' : 'minutes');\r\n     var freeDays = [];\r\n     var businessHours = [ 1, 2, 3, 4, 5, 6, 0];\r\n     var infoBox = $('#infoBox');\r\n     var modalForm = $('#myModal');\r\n     var searchPatients = $(\".modal-search-patients\");\r\n\r\n     //Initialize Select2 Elements\r\n    $('.date').datetimepicker({\r\n            format:'YYYY-MM-DD',\r\n            locale: 'es',\r\n            \r\n         });\r\n   \r\n \r\n   $('.btn-gotodate').on('click', function (e) {\r\n       var mid = $(this).data('mid');\r\n       var date = $('#go_date_'+ mid).val();\r\n       $('#calendar-m'+ mid).fullCalendar( 'gotoDate', date );\r\n    })\r\n\r\n\r\n    function dayNumber(date){\r\n\r\n        return $.fullCalendar.moment(date).day();\r\n    }\r\n\r\n    function isOverlapping(calendar, event) {\r\n     \r\n        var array = calendar.fullCalendar('clientEvents');\r\n         \r\n          for(i in array){\r\n              if(event.idRemove != array[i]._id)\r\n              {\r\n                if (event.end > array[i].start._i && event.start < array[i].end._i){\r\n                   return true;\r\n                }\r\n              }\r\n          }\r\n          return false;\r\n    }\r\n\r\n    init_schedules_appointments($('td.calendar-medic-day'));\r\n    \r\n    function init_schedules_appointments(ele) {\r\n\r\n            ele.each(function () {\r\n\r\n              var medic =  $(this).find('> div').data('medic');\r\n              var office =  $(this).find('> div').data('office');\r\n              \r\n             // fetch_schedules_and_appointments(medic,office);\r\n             init_calendar(medic, [], []);\r\n             \r\n            });\r\n    }\r\n\r\n    /*function fetch_schedules_and_appointments(medic, office) {\r\n        var schedules = [];\r\n         \r\n        $.ajax({\r\n            type: 'GET',\r\n            url: '/medics/'+ medic +'/schedules/list?office='+ office,\r\n            data: {},\r\n            success: function (resp) {\r\n              \r\n\r\n                $.each(resp, function( index, item ) {\r\n                   \r\n                    item.allDay = parseInt(item.allDay); // = false;\r\n                  \r\n                     \r\n                     var working_hours = {\r\n                      // days of week. an array of zero-based day of week integers (0=Sunday)\r\n                      dow: [dayNumber(item.date)], // Monday - Thursday\r\n\r\n                      start: item.start,//.split('T')[1], // a start time (10am in this example)\r\n                      end: item.end//.split('T')[1], // an end time (6pm in this example)\r\n                     }\r\n\r\n                    schedules.push(working_hours);\r\n\r\n                });\r\n                \r\n              \r\n\r\n                $.ajax({\r\n                  type: 'GET',\r\n                  url: '/medics/'+ medic +'/appointments/list?office='+ office,\r\n                  data: {},\r\n                  success: function (resp) {\r\n                     \r\n\r\n                      var appointments = [];\r\n\r\n                      $.each(resp, function( index, item ) {\r\n                         \r\n                          item.allDay = parseInt(item.allDay); // = false;\r\n                          \r\n                          if((item.patient_id != 0 && item.office_id != office) || item.patient_id == 0){\r\n                             item.rendering = 'background';\r\n                          }\r\n                          \r\n\r\n                          appointments.push(item);\r\n                      });\r\n\r\n                      init_calendar(medic, appointments, schedules);\r\n                     \r\n                      \r\n                  },\r\n                  error: function (resp) {\r\n                      console.log('Error - '+ resp);\r\n\r\n                  }\r\n              });\r\n               \r\n          \r\n            },\r\n            error: function (resp) {\r\n                console.log('Error - '+ resp);\r\n\r\n            }\r\n        });\r\n\r\n    }*/\r\n\r\n    function init_calendar(medic,appointments, schedules) {\r\n     \r\n     var calendar = $('#calendar-m'+medic);\r\n     \r\n      minTime = calendar.attr('data-minTime') ? calendar.attr('data-minTime') : '06:00:00';\r\n      maxTime = calendar.attr('data-maxTime') ? calendar.attr('data-maxTime') : '18:00:00';\r\n      slotDuration = $('#selectSlotDuration').val() ? $('#selectSlotDuration').val() : calendar.attr('data-slotDuration');\r\n      eventDurationNumber = moment.duration(slotDuration).asMinutes(); //(slotDuration.split(':')[1] == \"00\" ? slotDuration.split(':')[0] : slotDuration.split(':')[1]);\r\n      eventDurationMinHours = 'minutes'; //(slotDuration.split(':')[1] == \"00\" ? 'hours' : 'minutes');\r\n      freeDays = calendar.attr('data-freeDays') ? JSON.parse(calendar.attr('data-freeDays')) : [];\r\n      \r\n      \r\n      calendar.fullCalendar({\r\n          locale: 'es',\r\n          defaultView: 'agendaDay',\r\n          timeFormat: 'h(:mm)a',\r\n          events: appointments,\r\n          forceEventDuration: true,\r\n          slotDuration:  slotDuration,\r\n          defaultTimedEventDuration: slotDuration,\r\n          editable: true,\r\n          droppable: true, // this allows things to be dropped onto the calendar !!!\r\n          eventOverlap: false,\r\n          businessHours: schedules,\r\n          eventConstraint:\"businessHours\",\r\n          minTime: minTime,\r\n          maxTime: maxTime,\r\n          scrollTime: minTime,\r\n          nowIndicator: true,\r\n          timezone: 'local',\r\n          allDaySlot: false,\r\n          eventReceive: function(event) {\r\n           \r\n             var currentDate = new Date();\r\n             if(event.start < currentDate) {\r\n                   \r\n                   calendar.fullCalendar( 'removeEvents', event._id)\r\n                   \r\n                   return false;\r\n              }\r\n\r\n              saveAppointment(calendar, event, event._id);\r\n            \r\n          },\r\n          eventResize: function(event, delta, revertFunc, jsEvent) {\r\n             \r\n      \r\n                updateAppointment(calendar, event, revertFunc);\r\n          \r\n           \r\n          },\r\n          eventDrop: function(event, delta, revertFunc) {\r\n             \r\n           \r\n                updateAppointment(calendar, event, revertFunc);\r\n              \r\n\r\n          },\r\n          eventRender: function(event, element) {\r\n            \r\n            if(element.hasClass(\"fc-nonbusiness\"))\r\n            {\r\n                infoBox.addClass('alert-danger').html('Hora no permitida!. No puedes selecionar horas pasadas o fuera del horario de atención').show();\r\n                      setTimeout(function()\r\n                        { \r\n                          infoBox.removeClass('alert-danger').html('').hide();\r\n                        },3000);\r\n\r\n                  return false;\r\n            }\r\n            \r\n            element.append( \"<span class='appointment-details' ></span>\" );\r\n\r\n            if (event.rendering == 'background') {\r\n                element.append('<span class=\"title-bg-event\">'+ event.title + '</span>');\r\n                \r\n            }\r\n\r\n\r\n             element.append('<div data-createdby=\"'+ event.created_by +'\"></div>');\r\n\r\n            if(event.patient_id && event.patient)\r\n            {\r\n              var officeInfoDisplay = '';\r\n\r\n              if(event.office)\r\n                {\r\n                     var officeInfo = event.office;//JSON.parse(event.office_info);\r\n\r\n                      officeInfoDisplay = 'en la '+ officeInfo.type +' '+ officeInfo.name+ ' <br>Dirección: ' + officeInfo.address + ', ' + officeInfo.province +', Tel: <a href=\"tel:'+ officeInfo.phone +'\">'+ officeInfo.phone +'</a><br>'\r\n                      \r\n                   \r\n                }\r\n              element.find(\".appointment-details\").click(function() {\r\n\r\n                  swal({\r\n                    title: 'Cita con el Paciente '+ event.patient.first_name + ' '+ event.patient.last_name,\r\n                    html: 'Fecha: '+ event.start.format(\"YYYY-MM-DD\") +' De: ' + event.start.format(\"HH:mm\") + ' a: ' + event.end.format(\"HH:mm\") +' <br>'+ officeInfoDisplay,\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#d33',\r\n                    cancelButtonColor: '#3085d6',\r\n                    cancelButtonText: 'Ok',\r\n                    confirmButtonText: 'Eliminar cita'\r\n                  }).then(function () {\r\n                    \r\n                    \r\n                      var resp = deleteAppointment(calendar, event._id, event);\r\n                      \r\n                      if(resp){\r\n\r\n                        swal(\r\n                          'Cita cancelada!',\r\n                          'Tu cita ha sido eliminada del calendario.',\r\n                          'success'\r\n                        )\r\n                      }\r\n\r\n                  },function (dismiss) {});\r\n\r\n              });\r\n             \r\n\r\n            }else{\r\n        \r\n                var officeInfoDisplay = '';\r\n                var titleAlert = event.title;\r\n                var textAlert = 'Fecha: '+ event.start.format(\"YYYY-MM-DD\") +' De: ' + event.start.format(\"HH:mm\") + ' a: ' + event.end.format(\"HH:mm\") + officeInfoDisplay;\r\n\r\n                if(event.office)\r\n                {\r\n                     var officeInfo = event.office;//JSON.parse(event.office_info);\r\n\r\n                      officeInfoDisplay = '<br>Dirección: ' + officeInfo.address + ', ' + officeInfo.province +' <br>'\r\n                      \r\n                      titleAlert = 'Este horario está reservado para atención en la '+ officeInfo.type +' '+ officeInfo.name\r\n                      \r\n                      textAlert = 'Favor llamar a este número: '+ officeInfo.phone + ' <br> Fecha: '+ event.start.format(\"YYYY-MM-DD\") +' De: ' + event.start.format(\"HH:mm\") + ' a: ' + event.end.format(\"HH:mm\") + officeInfoDisplay\r\n                }\r\n               \r\n               \r\n                element.find(\".appointment-details\").click(function() {\r\n                   swal({\r\n                      title: titleAlert,\r\n                      html: textAlert,\r\n                      showCancelButton: true,\r\n                      confirmButtonColor: '#d33',\r\n                      cancelButtonColor: '#3085d6',\r\n                      cancelButtonText: 'Ok',\r\n                      confirmButtonText: 'Eliminar!'\r\n                    }).then(function () {\r\n\r\n                      \r\n                        deleteSchedule(event._id, event);\r\n                     \r\n\r\n                      swal(\r\n                        'Evento eliminado!',\r\n                        'Tu evento ha sido eliminado del calendario.',\r\n                        'success'\r\n                      )\r\n\r\n                    },function (dismiss) {});\r\n\r\n                   \r\n                  \r\n                   \r\n                });\r\n\r\n              \r\n            }\r\n            \r\n\r\n        },\r\n      \r\n        dayClick: function(date, jsEvent, view) {\r\n\r\n              \r\n              if (view.name === \"month\") {\r\n                  \r\n                  calendar.fullCalendar('gotoDate', date);\r\n                  calendar.fullCalendar('changeView', 'agendaWeek');\r\n\r\n                  return false;\r\n              }\r\n\r\n              var currentDate = new Date();\r\n              \r\n          \r\n              if(date < currentDate || $(jsEvent.target).hasClass(\"fc-nonbusiness\")) {\r\n                  \r\n                  \r\n                    infoBox.addClass('alert-danger').html('Hora no permitida!. No puedes selecionar horas pasadas o fuera del horario de atención').show();\r\n                      setTimeout(function()\r\n                        { \r\n                          infoBox.removeClass('alert-danger').html('').hide();\r\n                        },3000);\r\n\r\n                  return false;\r\n              }\r\n\r\n             \r\n               if($(jsEvent.target).parent('div').hasClass(\"fc-bgevent\")) { //para prevenir que en eventos de fondo se agregue citas\r\n                  \r\n\r\n                  return false;\r\n              }\r\n\r\n\r\n           \r\n\r\n             \r\n\r\n                modalForm.modal({backdrop:'static', show:true });\r\n                modalForm.find('#modal-new-event').attr('data-modaldate', date.format());\r\n                modalForm.find('.modal-body').attr('data-modaldate', date.format());\r\n                modalForm.find('.modal-body').attr('data-date', date.format(\"dddd, MMMM Do YYYY\")).attr('data-hour', date.format(\"hh:mm a\" ));\r\n                modalForm.find('.modal-body').attr('data-medic', calendar.data('medic'));\r\n              \r\n              \r\n           \r\n          },\r\n        viewRender: function(view){\r\n            \r\n            $.ajax({\r\n              type: 'GET',\r\n              url: '/medics/'+ medic +'/schedules/list?office='+ calendar.data('office')+'&date1='+ view.start.format() +'&date2='+view.end.format(),\r\n              data: {},\r\n              success: function (resp) {\r\n                \r\n                  var schedules = [];\r\n                  $.each(resp, function( index, item ) {\r\n                     \r\n                      item.allDay = parseInt(item.allDay); // = false;\r\n                     \r\n                       \r\n                       var working_hours = {\r\n                        // days of week. an array of zero-based day of week integers (0=Sunday)\r\n                        dow: [dayNumber(item.date)], // Monday - Thursday\r\n\r\n                        start: item.start,//.split('T')[1], // a start time (10am in this example)\r\n                        end: item.end//.split('T')[1], // an end time (6pm in this example)\r\n                       }\r\n\r\n                      schedules.push(working_hours);\r\n\r\n                  });\r\n\r\n                  var bh = schedules;//$('#calendar').fullCalendar('option', 'businessHours');\r\n\r\n                 \r\n                    for (var i = bh.length - 1; i >= 0; i--) {\r\n\r\n                      if(moment(bh[i].start).isBetween(view.start, view.end))\r\n                      {\r\n                        bh[i].start = bh[i].start.split('T')[1];\r\n                        bh[i].end = bh[i].end.split('T')[1];\r\n                      }\r\n\r\n                    }\r\n                   \r\n                   \r\n                    calendar.fullCalendar('option', 'businessHours', bh);\r\n\r\n\r\n              },\r\n            error: function (resp) {\r\n                console.log('Error - '+ resp);\r\n\r\n            }\r\n\r\n          }); //ajax schedules\r\n          \r\n          calendar.fullCalendar( 'removeEventSources')\r\n          \r\n            $.ajax({\r\n              type: 'GET',\r\n              url: '/medics/'+ medic +'/appointments/list?calendar=1&office='+ calendar.data('office') +'&date1='+ view.start.format() +'&date2='+view.end.format(),\r\n              data: {},\r\n              success: function (resp) {\r\n                \r\n\r\n                  var appointments = [];\r\n\r\n                  $.each(resp, function( index, item ) {\r\n                    \r\n                      item.allDay = parseInt(item.allDay); // = false;\r\n                      \r\n                      if((item.patient_id != 0 && item.office_id != calendar.data('office')) || item.patient_id == 0){\r\n                        item.rendering = 'background';\r\n                      }\r\n                      \r\n\r\n                      appointments.push(item);\r\n                  });\r\n                 \r\n                  //init_calendar(medic, appointments, schedules);\r\n                  calendar.fullCalendar('addEventSource', appointments);\r\n                  \r\n              },\r\n              error: function (resp) {\r\n                  console.log('Error - '+ resp);\r\n\r\n              }\r\n          }); // ajax appointments\r\n\r\n           \r\n            \r\n          } // view render\r\n        \r\n      }); //fullcalendar\r\n    \r\n  } //init calendar\r\n\r\n\r\n  function crud(calendar, method, url, data, revertFunc) {\r\n       $('body').addClass('loading');\r\n      $.ajax({\r\n            type: method || 'POST',\r\n            url: url,\r\n            data: data,\r\n            success: function (resp) {\r\n               $('body').removeClass('loading');\r\n              if(method == \"POST\")\r\n              {\r\n                \r\n                calendar.fullCalendar( 'removeEvents', data.idRemove)\r\n                \r\n                if(resp){\r\n\r\n                      \r\n                      resp.allDay = parseInt(resp.allDay);\r\n\r\n                      if(resp.allDay)\r\n                      {\r\n                        if(prog_schedule)\r\n                          deleteSchedule(resp.id);\r\n                        else\r\n                          deleteAppointment(calendar,resp.id);\r\n                      \r\n                      }else{\r\n                          \r\n                          calendar.fullCalendar('renderEvent', resp, true);\r\n\r\n                        }\r\n                }else{\r\n                  infoBox.addClass('alert-danger').html('No se pudo crear la consulta!!').show();\r\n                        setTimeout(function()\r\n                        { \r\n                          infoBox.removeClass('alert-danger').hide();\r\n                        },3000);\r\n\r\n                   return\r\n                }\r\n\r\n              }\r\n               if(method == \"DELETE\")\r\n               {\r\n                 if(resp)\r\n                 {\r\n                  infoBox.addClass('alert-danger').html('No se puede eliminar consulta ya que se encuentra iniciada!!').show();\r\n                        setTimeout(function()\r\n                        { \r\n                          infoBox.removeClass('alert-danger').hide();\r\n                        },3000);\r\n\r\n                   return resp;\r\n                  }\r\n\r\n                  calendar.fullCalendar('removeEvents',data.idRemove);\r\n              \r\n               }\r\n               \r\n               if(method == \"PUT\")\r\n               {\r\n                 if(resp == '')\r\n                 {\r\n                  infoBox.addClass('alert-danger').html('No se puede cambiar de dia la consulta ya que se encuentra iniciada!!').show();\r\n                        setTimeout(function()\r\n                        { \r\n                          infoBox.removeClass('alert-danger').hide();\r\n                        },3000);\r\n\r\n\r\n                    revertFunc();\r\n                    \r\n                   return\r\n                  }\r\n                   \r\n                   calendar.fullCalendar( 'removeEvents', data.id)\r\n                   \r\n                    resp.allDay = parseInt(resp.allDay);\r\n                   \r\n\r\n                   calendar.fullCalendar('renderEvent', resp, true);\r\n                  \r\n                  \r\n               }\r\n                \r\n            },\r\n            error: function () {\r\n               $('body').removeClass('loading');\r\n              console.log('error saving appointment');\r\n\r\n            }\r\n        });\r\n\r\n    } //CRUD\r\n\r\n    function saveAppointment(calendar, event, idRemove)\r\n    {\r\n      slotDuration = calendar.attr('data-slotDuration');\r\n      eventDurationNumber = moment.duration(slotDuration).asMinutes();\r\n      eventDurationMinHours = 'minutes'; \r\n      \r\n      var appointment = {\r\n        title : event.title,\r\n        date : event.start.format(\"YYYY-MM-DD\"),\r\n        start : event.start.stripZone().format(),\r\n        end : (event.end) ? event.end.stripZone().format() : event.start.add(eventDurationNumber, eventDurationMinHours).stripZone().format(),\r\n        backgroundColor: event.backgroundColor, //Success (green)\r\n        borderColor: event.borderColor,\r\n        office_id: event.office_id,\r\n        patient_id: (event.patient_id) ? event.patient_id : 0,\r\n        user_id: event.user_id,\r\n        idRemove: idRemove,\r\n        office_info: (event.office_info) ? event.office_info : '',\r\n        allDay: 0\r\n        \r\n      };\r\n     \r\n      if(isOverlapping(calendar,appointment)){\r\n        appointment.allDay = 1;\r\n      }\r\n\r\n      crud(calendar ,'POST', '/clinic/appointments', appointment)\r\n\r\n    }//save appointment\r\n\r\n      function updateAppointment(calendar,event, revertFunc)\r\n    {\r\n      \r\n      var appointment = {\r\n        \r\n        date : event.start.format(\"YYYY-MM-DD\"),\r\n        start : event.start.stripZone().format(),\r\n        end : (event.end) ? event.end.stripZone().format() : event.start.add(eventDurationNumber, eventDurationMinHours).stripZone().format(),\r\n        patient_id: event.patient_id,\r\n        id: event.id,\r\n        office_info: event.office_info,\r\n        allDay: event.allDay\r\n      };\r\n      \r\n      crud(calendar,'PUT', '/clinic/appointments/'+appointment.id, appointment, revertFunc)\r\n\r\n    }// update appointment\r\n\r\n    function deleteAppointment(calendar, id)\r\n    {\r\n\r\n      crud(calendar,'DELETE', '/clinic/appointments/'+ id + '/delete', {idRemove:id})\r\n     \r\n    } //delete appointment\r\n\r\n    modalForm.on('shown.bs.modal', function (event) {\r\n     \r\n      var date = $(this).find('.modal-body').attr('data-date') \r\n      var hour = $(this).find('.modal-body').attr('data-hour')\r\n     \r\n  \r\n      var modal = $(this)\r\n      modal.find('.modal-title').html('Crear cita para el  <span class=\"label bg-yellow\">' + date + '</span> a las <span class=\"label bg-yellow\">'+ hour + '</span>' )\r\n   \r\n    });\r\n\r\n     function createEventFromModal()\r\n    {\r\n     \r\n      var currColor = \"#3c8dbc\"; //Red by default\r\n      var val = modalForm.find(\"#modal-new-event\").val();\r\n      var valSelect = modalForm.find(\".modal-body\").find('.widget-user-2').attr('data-patient');//val();\r\n      var valName = modalForm.find(\".modal-body\").find('.widget-user-2').attr('data-title');\r\n      var office_id = modalForm.find(\".modal-body\").find('.widget-user-2').attr('data-office');\r\n      var medic_id = modalForm.find(\".modal-body\").attr('data-medic');\r\n      var date = $.fullCalendar.moment(modalForm.find('#modal-new-event').attr('data-modaldate'));\r\n      var end = (modalForm.find('#modal-new-event').attr('data-modaldate-end')) ? $.fullCalendar.moment(modalForm.find('#modal-new-event').attr('data-modaldate-end')) : '';\r\n      var calendar = $('#calendar-m'+medic_id);\r\n     \r\n      if (valSelect.length == 0 || !office_id) {\r\n        return;\r\n      }\r\n     \r\n\r\n      //Create events\r\n\r\n      var eventObject = {\r\n          title: $.trim(val + ' - '+ valName), // use the element's text as the event title\r\n          user_id: medic_id,\r\n          patient_id: valSelect,\r\n          office_id: office_id,\r\n          //created_by: $('input[name=user_id]').val()\r\n         \r\n        };\r\n\r\n       var originalEventObject = eventObject;//event.data('eventObject');\r\n        \r\n        // we need to copy it, so that multiple events don't have a reference to the same object\r\n        var copiedEventObject = $.extend({}, originalEventObject);\r\n        \r\n        \r\n        // assign it the date that was reported\r\n        copiedEventObject.start = date;\r\n        \r\n        if(end)\r\n          copiedEventObject.end = end;\r\n\r\n        if( date.isValid())\r\n        {\r\n         \r\n        \r\n        copiedEventObject.allDay = false;//allDay;\r\n        copiedEventObject.backgroundColor = currColor; //event.css(\"background-color\");\r\n        copiedEventObject.borderColor = currColor;//event.css(\"border-color\");\r\n        copiedEventObject.overlap = false;\r\n        \r\n        var _id = calendar.fullCalendar('renderEvent', copiedEventObject, true)[0]._id; // get _id from event in the calendar (this is for if user will remove the event)\r\n       \r\n       \r\n        saveAppointment(calendar, copiedEventObject, _id);\r\n      }\r\n      //Remove event from text input\r\n      modalForm.find(\"#modal-new-event\").val(\"\");\r\n      //$(\".modal-search-patients\").val(\"\").trigger('change');\r\n      //$(\".modal-search-patients\").text(\"\").trigger('change');\r\n      modalForm.find('#modal-new-event').attr('data-modaldate', '');\r\n      modalForm.modal('hide');\r\n    } //create from modal function\r\n\r\n     searchPatients.select2({\r\n            placeholder: \"Buscar paciente\",\r\n            ajax: {\r\n              url: \"/medic/patients/list\",\r\n              dataType: 'json',\r\n              delay: 250,\r\n              data: function (params) {\r\n                return {\r\n                  q: params.term // search term\r\n                  \r\n                };\r\n              },\r\n              processResults: function (data) {\r\n               searchPatients.empty();\r\n               // console.log(data.data);\r\n                var items = []\r\n                \r\n                $.each(data.data, function (index, value) {\r\n                    item = {\r\n                      id: value.id,\r\n                      text: value.first_name\r\n                    }\r\n                    items.push(item);\r\n                })\r\n              \r\n                    \r\n                return {\r\n                  results: items,\r\n                  \r\n                };\r\n              }\r\n\r\n            \r\n             \r\n            }\r\n     });\r\n\r\n     $(\".btn-finalizar-cita\").click(function (e) {\r\n      e.preventDefault();\r\n\r\n      createEventFromModal();\r\n      \r\n    });\r\n     \r\n\r\n    $(\".dropdown-toggle\").dropdown();\r\n});"]}